import{c as A,A as y,a as I,s as p,d as W,S as g}from"./loadSts-Be8iRlG4.js";import{e as M,i as H,C as P,E as _,g as j,I as B,h as G,f as N,M as V,P as J,R as L,b as Q}from"./loadSts-Be8iRlG4.js";import"./index-DGRu_coW.js";import{C as E,g as R,a as h}from"./index-2iHft_da.js";import{b as Y}from"./index-2iHft_da.js";class x extends E.classBuilder().ep({...A}).m(function(t,i,o,n){return[R(o,this.serialize,this.deserialize),h(o,t.getEndpointParameterInstructions())]}).s("AWSSecurityTokenServiceV20110615","AssumeRoleWithWebIdentity",{}).n("STSClient","AssumeRoleWithWebIdentityCommand").f(y,I).ser(p).de(W).build(){}const u="us-east-1",b=e=>{if(typeof(e==null?void 0:e.Arn)=="string"){const t=e.Arn.split(":");if(t.length>4&&t[4]!=="")return t[4]}},T=async(e,t,i)=>{var s;const o=typeof e=="function"?await e():e,n=typeof t=="function"?await t():t;return(s=i==null?void 0:i.debug)==null||s.call(i,"@aws-sdk/client-sts::resolveRegion","accepting first of:",`${o} (provider)`,`${n} (parent client)`,`${u} (STS default)`),o??n??u},w=(e,t)=>{let i;return async o=>{var c,r,l;if(!i){const{logger:m=(c=e==null?void 0:e.parentClientConfig)==null?void 0:c.logger,region:d,requestHandler:S=(r=e==null?void 0:e.parentClientConfig)==null?void 0:r.requestHandler,credentialProviderLogger:C}=e,f=await T(d,(l=e==null?void 0:e.parentClientConfig)==null?void 0:l.region,C);i=new t({region:f,requestHandler:S,logger:m})}const{Credentials:n,AssumedRoleUser:s}=await i.send(new x(o));if(!n||!n.AccessKeyId||!n.SecretAccessKey)throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${o.RoleArn}`);const a=b(s);return{accessKeyId:n.AccessKeyId,secretAccessKey:n.SecretAccessKey,sessionToken:n.SessionToken,expiration:n.Expiration,...n.CredentialScope&&{credentialScope:n.CredentialScope},...a&&{accountId:a}}}},k=(e,t)=>t?class extends e{constructor(o){super(o);for(const n of t)this.middlewareStack.use(n)}}:e,$=(e={},t)=>w(e,k(g,t));export{E as $Command,M as AssumeRoleCommand,H as AssumeRoleResponseFilterSensitiveLog,x as AssumeRoleWithWebIdentityCommand,y as AssumeRoleWithWebIdentityRequestFilterSensitiveLog,I as AssumeRoleWithWebIdentityResponseFilterSensitiveLog,P as CredentialsFilterSensitiveLog,_ as ExpiredTokenException,j as IDPCommunicationErrorException,B as IDPRejectedClaimException,G as InvalidAuthorizationMessageException,N as InvalidIdentityTokenException,V as MalformedPolicyDocumentException,J as PackedPolicyTooLargeException,L as RegionDisabledException,g as STSClient,Q as STSServiceException,Y as __Client,$ as getDefaultRoleAssumerWithWebIdentity};
